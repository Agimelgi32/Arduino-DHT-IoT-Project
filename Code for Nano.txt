/*

// Master codet
// Protus Tanuhandaru
// www.progresstech.co.id 

#include <Wire.h> // Memanggil library untuk komunikasi I2C
#include "DHT.h"
#include "RTClib.h"

#define alamatSlave 10 // Alamat Slave untuk Arduino 
#define DHTPIN 8
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
RTC_DS3231 RTC;
//char* dataMaster; // Variabel untuk menampung data komunikasi antara master dan slave 
//char data[8];
volatile byte _months, _date, _hours, _seconds, _minutes;
int _years, _yr;
char* dataMaster; // Variabel untuk menampung data komunikasi antara master dan slave 
//char data[30];

void setup() {
  Wire.begin(); // Memulai komunikasi I2C pada PIN A4 dan PIN A5
  Serial.begin(9600); // Memulai komunikasi serial pada baud rate 9600
  Serial.println(F("Data transfer"));

  dht.begin();
  RTC.begin();
}

//char charDM[12];
//String data = String(t) + "," + String(h);
//  data.toCharArray(charDM,12);
//  dataMaster = charDM;

void loop() {
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  
  DateTime now = RTC.now();
  _years=now.year();
  _months=now.month();
  _date=now.day();
  _hours=now.hour();
  _minutes=now.minute();
  _seconds=now.second();

    // Check if an hour has been elapsed
  if (_minutes > 59) {
    _minutes = 0;
  }
  // Check if a day has been elapsed
  if (_hours > 23) {
    _hours = 0;
  }
  
  char charData[30];
  String data = String(_hours) + ":" + String(_minutes) 
                + ":" + String(_seconds) + "," + String(_date) 
                + "/" + String(_months) + "/" + String(_years) 
                + "," + String(t,1) + "," + String(h,0);
  data.toCharArray(charData,30);
  dataMaster = charData;
  Wire.beginTransmission(alamatSlave); // Master memulai pengiriman data ke alamat slave
  Wire.write(dataMaster); // Master menuliskan data
//
//  dataMaster = dtostrf(t,6,1,data);
//  Wire.beginTransmission(alamatSlave); // Master memulai pengiriman data ke alamat slave
//  Wire.write(dataMaster); // Master menuliskan data
  Serial.print("Master mengirimkan nilai Pesan : "); // Menampilkan konten pada Serial Monitor 
  Serial.println(dataMaster); // Menampilkan konten pada Serial Monitor 
  Wire.endTransmission(); // Mengakiri sesi pengiriman data 
  delay(1000);
//
//  // Meminta nilai dari slave 
//  Wire.requestFrom(alamatSlave, 1); // Master meminta data dari Slave
//  dataMaster = Wire.read(); // Master membaca data yang dikirimkan oleh Slave
//  Serial.print("Slave mengirimkan nilai : "); // Menampilkan konten pada Serial Monitor 
//  Serial.println(dataMaster); // Menampilkan konten pada Serial Monitor
//  delay(1000);
}
*/


// Slave
// Protus Tanuhandaru
// www.progresstech.co.id 
#include <SPI.h>              // Include IC protocol SPI/12C library code
#include "SdFat.h"            // Include SDcard library code
#include <Wire.h> // Memanggil library untuk komunikasi I2C
#define alamatSlave 10 // Alamat Slave untuk Arduino 
//char dataSlave[12]; // menampung data komunikasi antara master dan slave 
char buf[28] = " ";
SdFat SD;     
const int chipSelect = 10;

unsigned long previousMillis = 0;
unsigned long interval = 60000;
File DataFile;

void setup() {
  Wire.begin(alamatSlave); // Memulai komunikasi I2C pada PIN A4 dan PIN A5
//  Wire.onRequest(requestEvents); // Memanggil fungsi ketika Slave menerima nilai dari Master
  Wire.onReceive(receiveEvents); // Memanggil fungsi ketika Master meminta nilai dari Slave
  Serial.println("ProgressTech");
  Serial.begin(9600); // Memulai komunikasi serial pada baud rate 9600
    if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    // don't do anything more:
    while (1);
  }
}

//void requestEvents() {
//  dataSlave = dataSlave + 1; // Menambahkan angka satu ke variabel komunikasi antara master dan slave
//  Serial.println("Slave menerima permintaan dari Master");
//  Serial.print("Mengirimkan nilai : "); // Menampilkan konten pada Serial Monitor 
//  Serial.println(dataSlave); // Menampilkan konten pada Serial Monitor 
//  Wire.write(dataSlave); // Slave mengirimkan data kepada Master
//}

void receiveEvents(int jumlahByte) {
  
  for (int i = 0; i < 28; i++)
  {
    buf[i] = Wire.read();  //arduino buf[8] = Wire.read();  //arduino
  }
//  char dataSlave = Wire.read();
//  Serial.print("Nilai diterima : "); // Menampilkan konten pada Serial Monitor
//  Serial.println(dataSlave); // Menampilkan konten pada Serial Monitor
}

void loop() {
  
  Serial.println(buf);  //arduino
//  Serial.println(buf[2]);  //d
  delay(1000);
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval)
  {
    previousMillis = currentMillis;

  File DataFile = SD.open("DATA.csv", FILE_WRITE);
    if (DataFile) {
      DataFile.println(buf);
      DataFile.close();
      Serial.print("Data logging : ");
      Serial.println(buf);  //arduino
    }
    else {
    Serial.println("error opening datalog.txt");
    }
  }
}